name: "Publish phosphobot server"
on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build for"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - pypi
      publish:
        description: "Whether to publish the release when using workflow_dispatch"
        required: false
        default: false
        type: boolean
  release:
    types: [published]

# To configure your package manager with this repository:
# Configure your VM to access Artifact Registry packages using the following

#  curl https://europe-west1-apt.pkg.dev/doc/repo-signing-key.gpg | sudo apt-key add -
#  echo "deb https://europe-west1-apt.pkg.dev/projects/portal-385519 phospho-apt main" | sudo tee -a /etc/apt/sources.list.d/artifact-registry.list
#  sudo apt update
#Â  sudo apt install phosphobot

permissions:
  pull-requests: write
  contents: write
  # IMPORTANT: this permission is mandatory for Trusted Publishing
  id-token: write

jobs:
  publish_pypi:
    if: ${{ (github.event_name == 'release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish && (github.event.inputs.platform == 'all' || github.event.inputs.platform == 'pypi')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract current version
        id: version
        run: |
          VERSION=$(grep '^version =' phosphobot/pyproject.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if the version is the same as the one already on PyPI
        run: |
          PACKAGE_NAME="navrim-phosphobot"
          VERSION=${{ steps.version.outputs.version }}

          # Fetch the version list from PyPI
          if curl --silent --fail "https://pypi.org/pypi/$PACKAGE_NAME/json" > pypi.json; then
            if jq -e --arg VERSION "$VERSION" '.releases[$VERSION]' pypi.json > /dev/null; then
              echo "Version $VERSION already exists on PyPI."
              exit 1  # Optionally fail the job if version is already published
            else
              echo "Version $VERSION does not exist on PyPI. Proceeding..."
            fi
          else
            echo "Package $PACKAGE_NAME not found on PyPI or network error."
            exit 1
          fi

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "23.5"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: dashboard
        run: pnpm install --frozen-lockfile

      - name: Build dashboard frontend
        env:
          VITE_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: make build_frontend

      - name: Check that the frontend build was successful (dist folder not empty)
        run: |
          if [ ! -d "phosphobot/resources/dist" ]; then
            echo "Dashboard frontend build failed: dist folder not found"
            exit 1
          fi
          if [ ! "$(ls -A phosphobot/resources/dist)" ]; then
            echo "Dashboard frontend build failed: dist folder is empty"
            exit 1
          fi

      - name: Create tokens.toml
        run: |
          mkdir -p phosphobot/resources
          cat > phosphobot/resources/tokens.toml << EOF
          ENV = "prod"
          SENTRY_DSN = "${{ secrets.SENTRY_DSN }}"
          POSTHOG_API_KEY = "${{ secrets.POSTHOG_API_KEY }}"
          POSTHOG_HOST = "${{ vars.POSTHOG_HOST }}"
          SUPABASE_URL = "${{ vars.SUPABASE_URL }}"
          SUPABASE_KEY = "${{ secrets.SUPABASE_KEY }}"
          MODAL_API_URL = "${{ vars.MODAL_API_URL }}"
          EOF

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Build
        run: |
          cd phosphobot
          uv build

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install built wheel
        run: |
          python -m venv .testvenv
          source .testvenv/bin/activate
          pip install phosphobot/dist/navrim_phosphobot-*.whl

      - name: Run installed app
        run: |
          source .testvenv/bin/activate
          # Run in a different directory to avoid conflicts
          cd docs
          phosphobot --version
          phosphobot run --no-telemetry --simulation=headless --simulate-cameras --only-simulation --port=8080 --host=127.0.0.1 &

      - name: Wait for server
        run: |
          for i in {1..45}; do
            if curl -s http://localhost:8080/status; then
              echo "Server ready! in $i seconds" >> server.log
              echo "Server ready! in $i seconds"
              break
            else
              echo "Waiting for server..." >> server.log
              echo "Waiting for server..."
              sleep 1
            fi
          done

      - name: Run integration tests
        run: |
          cd phosphobot
          uv run pytest tests/api/
        continue-on-error: false

      - name: Publish to PyPI
        run: |
          cd phosphobot
          uv publish
